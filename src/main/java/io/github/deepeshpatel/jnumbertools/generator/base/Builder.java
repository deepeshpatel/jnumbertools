/*
 * JNumberTools Library v3.0.1
 * Copyright (c) 2025 Deepesh Patel (patel.deepesh@gmail.com)
 */

package io.github.deepeshpatel.jnumbertools.generator.base;

import java.math.BigInteger;
import java.util.List;

/**
 * Interface for building generators that produce permutations, combinations,
 * and other combinatorial structures.
 * <p>
 * This builder interface defines methods for creating generators in lexicographical order,
 * generating every mᵗʰ element, and determining the total count of elements that can be produced.
 * </p>
 *
 * @param <E> the type of elements to generate; this type specifies the elements produced by the generator.
 * @author Deepesh Patel
 * @version 3.0.1
 * @since 3.0.1
 */
public interface Builder<E> {

    /**
     * Creates a generator that produces elements in lexicographical order.
     *
     * @return an {@link AbstractGenerator} that generates elements in lexicographical order.
     */
    AbstractGenerator<E> lexOrder();

    /**
     * Creates a generator that produces every mᵗʰ element in lexicographical order, starting from a specified index.
     *
     * @param m     the interval of elements to generate (must be positive).
     * @param start the starting index for generating elements (must be non-negative).
     * @return a {@link MthElementGenerator} that generates every mᵗʰ element in lexicographical order starting from {@code start}.
     */
    Iterable<List<E>> lexOrderMth(BigInteger m, BigInteger start);

    /**
     * Returns the total number of elements that can be generated by this builder.
     *
     * @return the count of elements as a {@link BigInteger}.
     */
    BigInteger count();
}
